*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"\E4\BB\A3\E7\A0\81\E6\AD\A3\E5\B8\B8\E8\BF\90\E8\A1\8C\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"\E8\AF\B7\E8\BE\93\E5\85\A5n\E7\9A\84\E5\80\BC: \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"\E8\BE\93\E5\85\A5\E7\9A\84n\E5\80\BC\E8\BF\87\E5\A4\A7\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"\E7\A8\8B\E5\BA\8F\E6\89\A7\E8\A1\8C\E6\97\B6\E9\97\B4\EF\BC\9A%.6f \E7\A7\92\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

; Function Attrs: nounwind
declare i64 @clock() #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"\E4\BB\A3\E7\A0\81\E6\AD\A3\E5\B8\B8\E8\BF\90\E8\A1\8C\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"\E8\AF\B7\E8\BE\93\E5\85\A5n\E7\9A\84\E5\80\BC: \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"\E8\BE\93\E5\85\A5\E7\9A\84n\E5\80\BC\E8\BF\87\E5\A4\A7\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"\E7\A8\8B\E5\BA\8F\E6\89\A7\E8\A1\8C\E6\97\B6\E9\97\B4\EF\BC\9A%.6f \E7\A7\92\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

; Function Attrs: nounwind
declare i64 @clock() #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

; Loop:
23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

; Exit blocks
37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

; Loop:
23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

; Exit blocks
37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

; Loop:
23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

; Exit blocks
37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

; Loop:
23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

; Exit blocks
37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  store double 0.000000e+00, double* %5, align 8
  store double 1.000000e+00, double* %6, align 8
  store i32 1, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* noundef %8)
  %13 = load i32, i32* %8, align 4
  %14 = icmp sgt i32 %13, 100
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %46

17:                                               ; preds = %0
  %18 = call i64 @clock() #3
  store i64 %18, i64* %2, align 8
  %19 = load double, double* %5, align 8
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %19)
  %21 = load double, double* %6, align 8
  %22 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %21)
  br label %23

23:                                               ; preds = %27, %17
  %24 = load i32, i32* %9, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %37

27:                                               ; preds = %23
  %28 = load double, double* %6, align 8
  store double %28, double* %7, align 8
  %29 = load double, double* %5, align 8
  %30 = load double, double* %6, align 8
  %31 = fadd double %29, %30
  store double %31, double* %6, align 8
  %32 = load double, double* %6, align 8
  %33 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), double noundef %32)
  %34 = load double, double* %7, align 8
  store double %34, double* %5, align 8
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %9, align 4
  br label %23, !llvm.loop !6

37:                                               ; preds = %23
  %38 = call i64 @clock() #3
  store i64 %38, i64* %3, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load i64, i64* %2, align 8
  %41 = sub nsw i64 %39, %40
  %42 = sitofp i64 %41 to double
  %43 = fdiv double %42, 1.000000e+06
  store double %43, double* %4, align 8
  %44 = load double, double* %4, align 8
  %45 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), double noundef %44)
  br label %46

46:                                               ; preds = %37, %15
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  %9:gr32 = COPY $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %5:gr32 = COPY $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  %3:gr32 = COPY $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  %58:gr32 = COPY $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  %16:gr32 = COPY $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  %12:gr32 = COPY $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1200B	  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1216B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1232B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1248B	  %45:gr64 = MOV64ri @.str.5
1264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1280B	  $rdi = COPY %45:gr64
1296B	  $xmm0 = COPY %48:fr64
1312B	  $al = MOV8ri 1
1328B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1344B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1360B	  %47:gr32 = COPY $eax
1376B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1392B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1408B	  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1424B	  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
1440B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1456B	  JMP_1 %bb.3

1472B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1504B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  %38:gr64 = COPY $rax
1552B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1568B	  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1584B	  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
1600B	  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1616B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1632B	  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1648B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1664B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1680B	  %23:gr64 = MOV64ri @.str.6
1696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $rdi = COPY %23:gr64
1728B	  $xmm0 = COPY %26:fr64
1744B	  $al = MOV8ri 1
1760B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1792B	  %25:gr32 = COPY $eax

1808B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1824B	  %59:gr32 = MOV32r0 implicit-def $eflags
1840B	  $eax = COPY %59:gr32
1856B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  %9:gr32 = COPY $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  %5:gr32 = COPY $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  %3:gr32 = COPY $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  %58:gr32 = COPY $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  %16:gr32 = COPY $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  %12:gr32 = COPY $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1200B	  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1216B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1232B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1248B	  %45:gr64 = MOV64ri @.str.5
1264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1280B	  $rdi = COPY %45:gr64
1296B	  $xmm0 = COPY %48:fr64
1312B	  $al = MOV8ri 1
1328B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1344B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1360B	  %47:gr32 = COPY $eax
1376B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1392B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1408B	  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1424B	  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
1440B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1456B	  JMP_1 %bb.3

1472B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1504B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  %38:gr64 = COPY $rax
1552B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1568B	  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1584B	  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
1600B	  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1616B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1632B	  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1648B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1664B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1680B	  %23:gr64 = MOV64ri @.str.6
1696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1712B	  $rdi = COPY %23:gr64
1728B	  $xmm0 = COPY %26:fr64
1744B	  $al = MOV8ri 1
1760B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1792B	  %25:gr32 = COPY $eax

1808B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1824B	  %59:gr32 = MOV32r0 implicit-def $eflags
1840B	  $eax = COPY %59:gr32
1856B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %56:gr64
  $rsi = COPY %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %58:gr32 = COPY $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $xmm0 = COPY %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = COPY $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %45:gr64
  $xmm0 = COPY %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 %42:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr %32:fr64(tied-def 0), %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $xmm0 = COPY %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %25:gr32 = COPY $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %59:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %9:gr32 = COPY killed $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %56:gr64
  $rsi = COPY killed %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %58:gr32 = COPY killed $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %14:gr64
  $xmm0 = COPY killed %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %16:gr32 = COPY killed $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $xmm0 = COPY killed %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm killed %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %45:gr64
  $xmm0 = COPY killed %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %47:gr32 = COPY killed $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 killed %42:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY killed $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm killed %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr killed %32:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $xmm0 = COPY killed %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %59:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %9:gr32 = COPY killed $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %56:gr64
  $rsi = COPY killed %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %58:gr32 = COPY killed $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %14:gr64
  $xmm0 = COPY killed %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %16:gr32 = COPY killed $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $xmm0 = COPY killed %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm killed %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %45:gr64
  $xmm0 = COPY killed %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %47:gr32 = COPY killed $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 killed %42:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY killed $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm killed %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr killed %32:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $xmm0 = COPY killed %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %59:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %9:gr32 = COPY killed $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %56:gr64
  $rsi = COPY killed %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %58:gr32 = COPY killed $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %14:gr64
  $xmm0 = COPY killed %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %16:gr32 = COPY killed $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $xmm0 = COPY killed %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm killed %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %45:gr64
  $xmm0 = COPY killed %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %47:gr32 = COPY killed $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 killed %42:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY killed $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm killed %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr killed %32:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $xmm0 = COPY killed %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %59:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %9:gr32 = COPY killed $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %56:gr64
  $rsi = COPY killed %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %58:gr32 = COPY killed $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %14:gr64
  $xmm0 = COPY killed %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %16:gr32 = COPY killed $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $xmm0 = COPY killed %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = ADDSDrm killed %53:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %45:gr64
  $xmm0 = COPY killed %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %47:gr32 = COPY killed $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = ADD32ri8 killed %42:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY killed $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = SUB64rm killed %36:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = DIVSDrr killed %32:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $xmm0 = COPY killed %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %59:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %9:gr32 = COPY killed $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %56:gr64
  $rsi = COPY killed %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %58:gr32 = COPY killed $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %14:gr64
  $xmm0 = COPY killed %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %16:gr32 = COPY killed $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $xmm0 = COPY killed %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = COPY killed %53:fr64
  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %45:gr64
  $xmm0 = COPY killed %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %47:gr32 = COPY killed $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = COPY killed %42:gr32
  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY killed $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = COPY killed %36:gr64
  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = COPY killed %32:fr64
  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $xmm0 = COPY killed %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %59:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  %8:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %9:gr32 = COPY killed $eax
  %7:fr64 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  %4:gr64 = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax
  %1:gr64 = MOV64ri @.str.2
  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  %56:gr64 = MOV64ri @.str.3
  %57:gr64 = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %56:gr64
  $rsi = COPY killed %57:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %58:gr32 = COPY killed $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = COPY killed $rax
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %14:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %14:gr64
  $xmm0 = COPY killed %17:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %16:gr32 = COPY killed $eax
  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %10:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $xmm0 = COPY killed %13:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %12:gr32 = COPY killed $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %52:fr64 = COPY killed %53:fr64
  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %45:gr64 = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %45:gr64
  $xmm0 = COPY killed %48:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %47:gr32 = COPY killed $eax
  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr32 = COPY killed %42:gr32
  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %38:gr64 = COPY killed $rax
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  %35:gr64 = COPY killed %36:gr64
  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  %30:fr64 = COPY killed %32:fr64
  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  %23:gr64 = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %23:gr64
  $xmm0 = COPY killed %26:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %25:gr32 = COPY killed $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  %59:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %59:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY killed %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY killed %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY killed %1:gr64
400B	  $rsi = COPY killed %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY killed %56:gr64
592B	  $rsi = COPY killed %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY killed %14:gr64
848B	  $xmm0 = COPY killed %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY killed %10:gr64
992B	  $xmm0 = COPY killed %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
1184B	  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1200B	  %52:fr64 = COPY killed %53:fr64
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY killed %45:gr64
1312B	  $xmm0 = COPY killed %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
1424B	  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1440B	  %41:gr32 = COPY killed %42:gr32
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
1600B	  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1616B	  %35:gr64 = COPY killed %36:gr64
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1680B	  %30:fr64 = COPY killed %32:fr64
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY killed %23:gr64
1792B	  $xmm0 = COPY killed %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1888B	  %59:gr32 = MOV32r0 implicit-def dead $eflags
1904B	  $eax = COPY killed %59:gr32
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY killed %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY killed %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY killed %1:gr64
400B	  $rsi = COPY killed %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY killed %56:gr64
592B	  $rsi = COPY killed %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY killed %14:gr64
848B	  $xmm0 = COPY killed %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY killed %10:gr64
992B	  $xmm0 = COPY killed %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed %55:fr64 :: (store (s64) into %ir.7)
1184B	  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1200B	  %52:fr64 = COPY killed %53:fr64
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY killed %45:gr64
1312B	  $xmm0 = COPY killed %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed %44:fr64 :: (store (s64) into %ir.5)
1424B	  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1440B	  %41:gr32 = COPY killed %42:gr32
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %38:gr64 :: (store (s64) into %ir.3)
1600B	  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1616B	  %35:gr64 = COPY killed %36:gr64
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %32:fr64 = CVTSI642SDrr killed %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1680B	  %30:fr64 = COPY killed %32:fr64
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), killed %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY killed %23:gr64
1792B	  $xmm0 = COPY killed %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1888B	  %59:gr32 = MOV32r0 implicit-def dead $eflags
1904B	  $eax = COPY killed %59:gr32
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1200B	  %52:fr64 = COPY %53:fr64
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1440B	  %41:gr32 = COPY %42:gr32
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1616B	  %35:gr64 = COPY %36:gr64
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1680B	  %30:fr64 = COPY %32:fr64
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1888B	  %59:gr32 = MOV32r0 implicit-def dead $eflags
1904B	  $eax = COPY %59:gr32
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %53:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1200B	  %52:fr64 = COPY %53:fr64
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %42:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1440B	  %41:gr32 = COPY %42:gr32
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %36:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1616B	  %35:gr64 = COPY %36:gr64
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %32:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1680B	  %30:fr64 = COPY %32:fr64
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1888B	  %59:gr32 = MOV32r0 implicit-def dead $eflags
1904B	  $eax = COPY %59:gr32
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY killed $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY killed $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY killed $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY killed $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY killed $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY killed $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY killed $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY killed $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY killed $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY killed $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  %8:gr64 = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $rdi = COPY %8:gr64
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  dead %9:gr32 = COPY $eax
144B	  %7:fr64 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %7:fr64 :: (store (s64) into %ir.5)
176B	  %6:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %6:fr64 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  %4:gr64 = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  $rdi = COPY %4:gr64
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  dead %5:gr32 = COPY $eax
336B	  %1:gr64 = MOV64ri @.str.2
352B	  %2:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = COPY %1:gr64
400B	  $rsi = COPY %2:gr64
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
464B	  dead %3:gr32 = COPY $eax
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  %56:gr64 = MOV64ri @.str.3
544B	  %57:gr64 = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %56:gr64
592B	  $rsi = COPY %57:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %58:gr32 = COPY $eax
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  %19:gr64 = COPY $rax
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19:gr64 :: (store (s64) into %ir.2)
784B	  %17:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  %14:gr64 = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
832B	  $rdi = COPY %14:gr64
848B	  $xmm0 = COPY %17:fr64
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
912B	  dead %16:gr32 = COPY $eax
928B	  %13:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  %10:gr64 = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %10:gr64
992B	  $xmm0 = COPY %13:fr64
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %12:gr32 = COPY $eax

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  %22:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm %22:gr32, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  %55:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, %55:fr64 :: (store (s64) into %ir.7)
1184B	  %52:fr64 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  %52:fr64 = ADDSDrm %52:fr64(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, %52:fr64 :: (store (s64) into %ir.6)
1248B	  %48:fr64 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  %45:gr64 = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1296B	  $rdi = COPY %45:gr64
1312B	  $xmm0 = COPY %48:fr64
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1376B	  dead %47:gr32 = COPY $eax
1392B	  %44:fr64 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, %44:fr64 :: (store (s64) into %ir.5)
1424B	  %41:gr32 = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, %41:gr32 :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1568B	  %38:gr64 = COPY $rax
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %38:gr64 :: (store (s64) into %ir.3)
1600B	  %35:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  %35:gr64 = SUB64rm %35:gr64(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  %30:fr64 = CVTSI642SDrr %35:gr64, implicit $mxcsr
1664B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, %30:fr64 :: (store (s64) into %ir.4)
1728B	  %26:fr64 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  %23:gr64 = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1776B	  $rdi = COPY %23:gr64
1792B	  $xmm0 = COPY %26:fr64
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1856B	  dead %25:gr32 = COPY $eax

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  renamable $xmm0 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
176B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  renamable $rdi = MOV64ri @.str.2
352B	  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  renamable $rdi = MOV64ri @.str.3
544B	  renamable $rsi = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
784B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  renamable $rdi = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  renamable $rdi = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
1184B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
1248B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  renamable $rdi = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
1424B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
1600B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1664B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
1728B	  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  renamable $rdi = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  renamable $xmm0 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
176B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  renamable $rdi = MOV64ri @.str.2
352B	  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  renamable $rdi = MOV64ri @.str.3
544B	  renamable $rsi = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
784B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  renamable $rdi = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  renamable $rdi = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
1184B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
1248B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  renamable $rdi = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
1424B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
1600B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1664B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
1728B	  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  renamable $rdi = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  renamable $xmm0 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
176B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  renamable $rdi = MOV64ri @.str.2
352B	  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  renamable $rdi = MOV64ri @.str.3
544B	  renamable $rsi = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
784B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  renamable $rdi = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  renamable $rdi = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
1184B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
1248B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  renamable $rdi = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
1424B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
1600B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1664B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
1728B	  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  renamable $rdi = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  renamable $xmm0 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
176B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  renamable $rdi = MOV64ri @.str.2
352B	  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  renamable $rdi = MOV64ri @.str.3
544B	  renamable $rsi = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
784B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  renamable $rdi = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  renamable $rdi = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
1184B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
1248B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  renamable $rdi = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
1424B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
1600B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1664B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
1728B	  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  renamable $rdi = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  renamable $xmm0 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
176B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  renamable $rdi = MOV64ri @.str.2
352B	  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  renamable $rdi = MOV64ri @.str.3
544B	  renamable $rsi = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
784B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  renamable $rdi = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  renamable $rdi = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
1184B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
1248B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  renamable $rdi = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
1424B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
1600B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1664B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
1728B	  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  renamable $rdi = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  renamable $rdi = MOV64ri @.str
48B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  $al = MOV8ri 0
96B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  renamable $xmm0 = FsFLD0SD
160B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
176B	  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
192B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
208B	  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
224B	  renamable $rdi = MOV64ri @.str.1
240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $al = MOV8ri 0
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  renamable $rdi = MOV64ri @.str.2
352B	  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $al = MOV8ri 0
432B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
448B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
496B	  JCC_1 %bb.2, 14, implicit killed $eflags

512B	bb.1 (%ir-block.15):
	; predecessors: %bb.0
	  successors: %bb.6

528B	  renamable $rdi = MOV64ri @.str.3
544B	  renamable $rsi = MOV64ri @.str.4
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
672B	  JMP_1 %bb.6

688B	bb.2 (%ir-block.17):
	; predecessors: %bb.0
	  successors: %bb.3

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
720B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
768B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
784B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
800B	  renamable $rdi = MOV64ri @.str.5
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $al = MOV8ri 1
880B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
944B	  renamable $rdi = MOV64ri @.str.5
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 1
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1072B	bb.3 (%ir-block.23):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

1088B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1104B	  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
1120B	  JCC_1 %bb.5, 13, implicit killed $eflags

1136B	bb.4 (%ir-block.27):
	; predecessors: %bb.3
	  successors: %bb.3

1152B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1168B	  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
1184B	  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
1216B	  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
1232B	  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
1248B	  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
1264B	  renamable $rdi = MOV64ri @.str.5
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1328B	  $al = MOV8ri 1
1344B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1360B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1392B	  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
1408B	  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
1424B	  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
1456B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1472B	  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
1488B	  JMP_1 %bb.3

1504B	bb.5 (%ir-block.37):
	; predecessors: %bb.3
	  successors: %bb.6

1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1536B	  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
1552B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1584B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
1600B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
1632B	  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
1648B	  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
1664B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
1696B	  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
1712B	  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
1728B	  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
1744B	  renamable $rdi = MOV64ri @.str.6
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1808B	  $al = MOV8ri 1
1824B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

1872B	bb.6 (%ir-block.46):
	; predecessors: %bb.5, %bb.1

1904B	  $eax = MOV32r0 implicit-def dead $eflags
1920B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = FsFLD0SD
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi %stack.8, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r %stack.7, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.7, 1, $noreg, 0, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, %stack.7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOVSDmr %stack.6, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr %stack.5, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = MOVSDrm_alt %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOVSDmr %stack.4, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm %stack.8, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.8, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = FsFLD0SD
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-76]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-24]
  fi#6: size=8, align=8, at location [SP-48]
  fi#7: size=4, align=4, at location [SP-28]
  fi#8: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 1.000000e+06, align=8

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -68, $noreg, 0 :: (store (s32) into %ir.1)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $xmm0 = XORPSrr undef $xmm0(tied-def 0), undef $xmm0
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.9)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  renamable $rsi = LEA64r $rbp, 1, $noreg, -20, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -20, $noreg, 100, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.15):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.3
  renamable $rsi = MOV64ri @.str.4
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  JMP_1 %bb.6

bb.2 (%ir-block.17):
; predecessors: %bb.0
  successors: %bb.3

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rax :: (store (s64) into %ir.2)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.3 (%ir-block.23):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.27):
; predecessors: %bb.3
  successors: %bb.3

  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -40, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.7)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $xmm0 = ADDSDrm killed renamable $xmm0(tied-def 0), $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
  MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.6)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.6)
  renamable $rdi = MOV64ri @.str.5
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -40, $noreg :: (load (s64) from %ir.7)
  MOVSDmr $rbp, 1, $noreg, -32, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.9)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.9)
  JMP_1 %bb.3

bb.5 (%ir-block.37):
; predecessors: %bb.3
  successors: %bb.6

  CALL64pcrel32 target-flags(x86-plt) @clock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rax :: (store (s64) into %ir.3)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %ir.3)
  renamable $rax = SUB64rm killed renamable $rax(tied-def 0), $rbp, 1, $noreg, -64, $noreg, implicit-def dead $eflags :: (load (s64) from %ir.2)
  renamable $xmm0 = CVTSI642SDrr killed renamable $rax, implicit $mxcsr
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  MOVSDmr $rbp, 1, $noreg, -48, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.4)
  renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %ir.4)
  renamable $rdi = MOV64ri @.str.6
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $xmm0, implicit-def $eax

bb.6 (%ir-block.46):
; predecessors: %bb.5, %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 80, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

